- jasmine.js
    - jasmine core file
    - contains the jasmine framework itself
    - contains version at the end

- jasmine-html.js
    - used as reporter
    - used to show the specs that pass / fail
    - shows error details
    - adds html elements to the spec runner page to create the report for test specs
    - can be changed to add a different reporter

- boot.js
    - loaded at last
    - starts off the project
    - contains the configuration needed for the framework
    - can be thought as the glue of the framework
    - starts everything we need to run jasmine and to discover and run our test specs

- jasmine.css
    - contains styles for the test report
    - for the spec runner

- spec file extensions
    - unit test files should have one of the following extensions
        *.spec.js
        *.test.js
    - spec === test

- file naming conventions
    - (target file name).spec.js
    - e.g. calculator.spec.js

- suite
    - group of tests / specs
    - lets us organize our specs
    - defined using describe() function

- spec
    - is a test
    - short form of 'specification'
    - set / group of expectations that tests the state of code

    - spec 1
        - expectation 1
        - expectation 2
            ...
        - expectation n

    - defined using it() function

- expectation
    - is an assertion
    - is a statement resulting in true or false
    - e.g.
        - 5 + 5 = 10 -> statement
        - expect 5 + 5 to be 10 -> true
        - expect 5 + 4 to be 10 -> false

- disabled spec
    - a spec that will report as pending and will not be executed

- disabled suite
    - all specs within the disabled suite will be marked as pending and will not be executed

- matcher
    - is a function
    - performs a boolean comparison between the actual value and the expected value

    expect(/*actual value*/).toBe(/*expected value*/)

    expect(calculator.total).toBe(5)
    (calculator.total === 5)

    - is responsible for reporting to jasmine if the expectation is true or false
    - results in a spec to pass or fail

- toBe()
    - expect the actual value to be === to the expected value

- toEqual()
    - expect the actual value to be equal to the expected, using deep equality comparison
    - uses deep equality comparison
    - best used for comparing objects / arrays

- truthy
    - a value that translates to true when evaluated in a boolean context
    - any value other than false, 0, "", null, undefined, NaN
    - https://developer.mozilla.org/en-US/docs/Glossary/Truthy

- falsy
    - a value that translates to false when evaluated in a boolean context
    - false, 0, "", null, undefined, NaN
    - https://developer.mozilla.org/en-US/docs/Glossary/Falsy

- toBeTruthy()
    - expect the actual value to be truthy

- toBeFalsy()
    - expect the actual value to be falsy

- undefined
    - is a property of the global object; i.e., it is a variable in global scope
    - is a primitive
    - is automatically assigned to variables that have been just declared
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined

- primitive
    - data that is not an object and has no methods

- toBeUndefined()
    - expect the actual value to be undefined

- null
    - represents the intentional absence of any object value
    - is a primitive
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null

- toBeNull()
    - expect the actual value to be null

- toContain(expected)
    - expect the actual value to contain a specific value

- toBeNaN()
    - expect the actual value to be NaN (Not a Number)

- toThrow(expected)
    - expect a function to throw something.

- toThrowError(expected, message)
    - expect a function to throw an Error.
    - expected
        - is optional
        - Error constructor the object that was thrown needs to be an 
        instance of. If not provided, Error will be used
    - message
        - is optional
        - The message that should be set on the thrown Error

- toMatch(expected)
    - expect the actual value to match a regular expression
    - expected
        - RegExp | String	
        - value to look for in the string.

- jasmine.anything() (static method)
    - get a matcher, usable in any matcher that uses Jasmine's equality 
    (e.g. toEqual, toContain, or toHaveBeenCalledWith), that will succeed 
    if the actual value being compared is not 'null' and not 'undefined'

- jasmine.addMatchers(matchers) (static)
    - Add custom matchers for the current scope of specs.
    - matchers
        - Keys from this object will be the new matcher names
    - https://jasmine.github.io/tutorials/custom_matcher

- third-party matchers
    - https://github.com/JamieMason/Jasmine-Matchers
    - go to 'releases'
    - download latest release - Source code (zip) (4.0.1 as on 04-02-2019)
    - unzip the content into a folder
    - open command prompt
        - navigate to the unzipped folder
        - install dependencies using 'npm install' command
        - build the project using 'npm run build' command
        - 'dist' folder is created when the build is successful
        - navigate to 'dist' folder
        - copy 'jasmine-matchers.js' file into the consumer app
        - add a script reference to 'jasmine-matchers.js' in the 'index.html' 
            after the script reference to jasmine framework
        - use relevant matcher of your choice in the test spec

- organizing test specs
    - describe()
        - groups specs
        - group of specs is also called as suite
        - will help you keep things organized

    - naming convention
        - create spec file with the same name that matches the source file
          that you are unit testing
            - calculator.js -> calculator.spec.js
    
    - folder structure
        - place the spec file in the same folder as the source file
        - easy to track, easy to find

    - nesting suites

- setup
    - where you place pre-requisites for your specs
    - executes before specs are run
    - beforeEach
        - executed before each spec (it) in the suite (describe) in which it is called
    - beforeAll
        - executed once before all the specs (it) in the suite (describe) in which it is called
    
- teardown
    - clean up steps for your specs
    - executes after specs are run
    - afterEach
        - executed after each spec (it) in the suite (describe) in which it is called
    - afterAll
        - executed once after all the specs (it) in the suite (describe) in which it is called

- spy
    - creates test doubles and helps us isolate dependencies for true unit testing
    - test double
        - a test double is an object that can stand in for a real object in a test
    - jasmine has test double functions called spies
    - can stub any function, track calls to it and all arguments
    - only exists in the describe or it block in which it is defined
    - will be removed after each spec
    - special matchers for interacting with spies
        - toHaveBeenCalled
        - toHaveBeenCalledWith
        - toHaveBeenCalledTimes
        